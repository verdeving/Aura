cmake_minimum_required(VERSION 4.1.2)
set(CMAKE_EXPORT_COMPILE_COMMANDS on)
set(CMAKE_CXX_EXTENSIONS off)
message(STATUS "Building on ${CMAKE_BUILD_TYPE} mode...")
project(Aura VERSION 0.0.1 LANGUAGES CXX)
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    add_executable(Aura WIN32)
    target_link_libraries(Aura PRIVATE dxguid dxgi d3d12)
    target_compile_definitions(Aura PRIVATE WIN32_LEAN_AND_MEAN= aura_windows=)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        target_compile_definitions(Aura PRIVATE _UNICODE=)
        target_compile_options(Aura PRIVATE -municode)
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    target_compile_definitions(Aura PRIVATE aura_linux=)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    target_compile_definitions(Aura PRIVATE aura_darwin=)
else()
    message(FATAL_ERROR "Unsupported system: ${CMAKE_SYSTEM_NAME}. Aura currently supports Windows, Linux, and macOS.")
endif()
string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" ARCH_LOWER)
if(ARCH_LOWER MATCHES "^(x86_64|amd64)$")
    target_compile_definitions(Aura PRIVATE aura_amd64=)
elseif(ARCH_LOWER MATCHES "^(aarch64|arm64)$")
    target_compile_definitions(Aura PRIVATE aura_arm64=)
elseif(ARCH_LOWER MATCHES "^(riscv64)$")
    target_compile_definitions(Aura PRIVATE aura_riscv64=)
else()
    message(WARNING "Unknown architecture: ${CMAKE_SYSTEM_PROCESSOR}. Aura only recognized amd64, arm64, and riscv64")
endif()
target_compile_definitions(Aura PRIVATE aura_major=0 aura_middle=0 aura_minor=1)
target_include_directories(Aura PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/Source")
target_compile_features(Aura PRIVATE cxx_std_26)
target_compile_options(Aura PRIVATE -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -fno-rtti -fno-exceptions)
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    target_compile_definitions(Aura PRIVATE aura_gcc=)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    target_compile_definitions(Aura PRIVATE aura_clang=)
    target_compile_options(Aura PRIVATE -Wno-dollar-in-identifier-extension)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
        target_compile_definitions(Aura PRIVATE aura_clang=)
        target_compile_options(Aura PRIVATE -Wno-dollar-in-identifier-extension)
    else()
        message(FATAL_ERROR "Unsupported Clang's front-end variant: ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}. Aura currently supports GNU Clang.")
    endif()
else()
    message(FATAL_ERROR "Unsupported C++ compiler: ${CMAKE_CXX_COMPILER_ID}. Aura currently supports GNU GCC, Apple Clang, or GNU Clang.")
endif()
get_property(AuraMulti GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(AuraMulti)
    target_compile_definitions(Aura PRIVATE $<$<CONFIG:Debug>:aura_debug=>)
    target_compile_options(Aura PRIVATE $<$<CONFIG:Debug>:-g -O0> $<$<CONFIG:Release>:-O3 -flto=full>)
    target_link_options(Aura PRIVATE $<$<CONFIG:Debug>:-g> $<$<CONFIG:Release>:-flto=full>)
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(Aura PRIVATE aura_debug=)
    target_compile_options(Aura PRIVATE -g -O0)
    target_link_options(Aura PRIVATE -g)
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_options(Aura PRIVATE -O3 -flto=full)
    target_link_options(Aura PRIVATE -flto=full)
else()
    message(FATAL_ERROR "Unsupported configuration. Aura currently supports Debug and Release.")
endif()
file(GLOB_RECURSE AURA_SOURCES CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/Source/*.cpp")
target_sources(Aura PRIVATE ${AURA_SOURCES})
if(AURA_ENABLE_TESTING)
    get_filename_component(AURA_MAIN "${CMAKE_CURRENT_SOURCE_DIR}/Source/Aura.cpp" ABSOLUTE)
    list(REMOVE_ITEM AURA_SOURCES "${AURA_MAIN}")
    file(GLOB_RECURSE AURA_TESTS CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/Test/*.cpp")
    file(GLOB_RECURSE AURA_FAIL_TESTS CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/TestFail/*.cpp")
    get_filename_component(AURA_TEST_PATH "${CMAKE_CURRENT_SOURCE_DIR}/Test" ABSOLUTE)
    get_filename_component(AURA_FAIL_TEST_PATH "${CMAKE_CURRENT_SOURCE_DIR}/TestFail" ABSOLUTE)
    set(AURA_TESTING "")
    enable_testing()
    foreach(AURA_TEST_FILE ${AURA_TESTS})
        file(RELATIVE_PATH REL_PATH ${AURA_TEST_PATH} "${AURA_TEST_FILE}")
        string(REPLACE "/" "_" TARGET_NAME "${REL_PATH}")
        string(REPLACE "." "_" TARGET_NAME "${TARGET_NAME}")
        set(AURA_TEST_NAME "AURA_TEST_${TARGET_NAME}")
        if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
            add_executable(${AURA_TEST_NAME} WIN32 ${AURA_TEST_FILE} ${AURA_SOURCES})
            target_link_libraries(${AURA_TEST_NAME} PRIVATE dxguid dxgi d3d12)
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE WIN32_LEAN_AND_MEAN= aura_windows=)
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
                target_compile_definitions(${AURA_TEST_NAME} PRIVATE _UNICODE=)
                target_compile_options(${AURA_TEST_NAME} PRIVATE -municode)
            endif()
        elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_linux=)
        elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_darwin=)
        else()
            message(FATAL_ERROR "Unsupported system: ${CMAKE_SYSTEM_NAME}. Aura currently supports Windows, Linux, and macOS.")
        endif()
        if(ARCH_LOWER MATCHES "^(x86_64|amd64)$")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_amd64=)
        elseif(ARCH_LOWER MATCHES "^(aarch64|arm64)$")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_arm64=)
        elseif(ARCH_LOWER MATCHES "^(riscv64)$")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_riscv64=)
        else()
            message(WARNING "Unknown architecture: ${CMAKE_SYSTEM_PROCESSOR}. Aura only recognized amd64, arm64, and riscv64")
        endif()
        target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_major=0 aura_middle=0 aura_minor=1)
        target_include_directories(${AURA_TEST_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/Source")
        target_compile_features(${AURA_TEST_NAME} PRIVATE cxx_std_26)
        target_compile_options(${AURA_TEST_NAME} PRIVATE -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -fno-rtti -fno-exceptions)
        if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_gcc=)
        elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_clang=)
            target_compile_options(${AURA_TEST_NAME} PRIVATE -Wno-dollar-in-identifier-extension)
        elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
            if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
                target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_clang=)
                target_compile_options(${AURA_TEST_NAME} PRIVATE -Wno-dollar-in-identifier-extension)
            else()
                message(FATAL_ERROR "Unsupported Clang's front-end variant: ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}. Aura currently supports GNU Clang.")
            endif()
        else()
            message(FATAL_ERROR "Unsupported C++ compiler: ${CMAKE_CXX_COMPILER_ID}. Aura currently supports GNU GCC, Apple Clang, or GNU Clang.")
        endif()
        if(AuraMulti)
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE $<$<CONFIG:Debug>:aura_debug=>)
            target_compile_options(${AURA_TEST_NAME} PRIVATE $<$<CONFIG:Debug>:-g -O0> $<$<CONFIG:Release>:-O3 -flto=full>)
            target_link_options(${AURA_TEST_NAME} PRIVATE $<$<CONFIG:Debug>:-g> $<$<CONFIG:Release>:-flto=full>)
        elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_debug=)
            target_compile_options(${AURA_TEST_NAME} PRIVATE -g -O0)
            target_link_options(${AURA_TEST_NAME} PRIVATE -g)
        elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
            target_compile_options(${AURA_TEST_NAME} PRIVATE -O3 -flto=full)
            target_link_options(${AURA_TEST_NAME} PRIVATE -flto=full)
        else()
            message(FATAL_ERROR "Unsupported configuration. Aura currently supports Debug and Release.")
        endif()
        add_test(NAME ${AURA_TEST_FILE} COMMAND ${AURA_TEST_NAME})
        list(APPEND AURA_TESTING ${AURA_TEST_NAME})
    endforeach()
    foreach(AURA_TEST_FILE ${AURA_FAIL_TESTS})
        file(RELATIVE_PATH REL_PATH ${AURA_FAIL_TEST_PATH} "${AURA_TEST_FILE}")
        string(REPLACE "/" "_" TARGET_NAME "${REL_PATH}")
        string(REPLACE "." "_" TARGET_NAME "${TARGET_NAME}")
        set(AURA_TEST_NAME "AURA_FAIL_TEST_${TARGET_NAME}")
        if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
            add_executable(${AURA_TEST_NAME} WIN32 ${AURA_TEST_FILE} ${AURA_SOURCES})
            target_link_libraries(${AURA_TEST_NAME} PRIVATE dxguid dxgi d3d12)
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE WIN32_LEAN_AND_MEAN= aura_windows=)
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
                target_compile_definitions(${AURA_TEST_NAME} PRIVATE _UNICODE=)
                target_compile_options(${AURA_TEST_NAME} PRIVATE -municode)
            endif()
        elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_linux=)
        elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_darwin=)
        else()
            message(FATAL_ERROR "Unsupported system: ${CMAKE_SYSTEM_NAME}. Aura currently supports Windows, Linux, and macOS.")
        endif()
        if(ARCH_LOWER MATCHES "^(x86_64|amd64)$")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_amd64=)
        elseif(ARCH_LOWER MATCHES "^(aarch64|arm64)$")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_arm64=)
        elseif(ARCH_LOWER MATCHES "^(riscv64)$")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_riscv64=)
        else()
            message(WARNING "Unknown architecture: ${CMAKE_SYSTEM_PROCESSOR}. Aura only recognized amd64, arm64, and riscv64")
        endif()
        target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_major=0 aura_middle=0 aura_minor=1)
        target_include_directories(${AURA_TEST_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/Source")
        target_compile_features(${AURA_TEST_NAME} PRIVATE cxx_std_26)
        target_compile_options(${AURA_TEST_NAME} PRIVATE -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -fno-rtti -fno-exceptions)
        if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_gcc=)
        elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_clang=)
            target_compile_options(${AURA_TEST_NAME} PRIVATE -Wno-dollar-in-identifier-extension)
        elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
            if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
                target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_clang=)
                target_compile_options(${AURA_TEST_NAME} PRIVATE -Wno-dollar-in-identifier-extension)
            else()
                message(FATAL_ERROR "Unsupported Clang's front-end variant: ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}. Aura currently supports GNU Clang.")
            endif()
        else()
            message(FATAL_ERROR "Unsupported C++ compiler: ${CMAKE_CXX_COMPILER_ID}. Aura currently supports GNU GCC, Apple Clang, or GNU Clang.")
        endif()
        if(AuraMulti)
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE $<$<CONFIG:Debug>:aura_debug=>)
            target_compile_options(${AURA_TEST_NAME} PRIVATE $<$<CONFIG:Debug>:-g -O0> $<$<CONFIG:Release>:-O3 -flto=full>)
            target_link_options(${AURA_TEST_NAME} PRIVATE $<$<CONFIG:Debug>:-g> $<$<CONFIG:Release>:-flto=full>)
        elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
            target_compile_definitions(${AURA_TEST_NAME} PRIVATE aura_debug=)
            target_compile_options(${AURA_TEST_NAME} PRIVATE -g -O0)
            target_link_options(${AURA_TEST_NAME} PRIVATE -g)
        elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
            target_compile_options(${AURA_TEST_NAME} PRIVATE -O3 -flto=full)
            target_link_options(${AURA_TEST_NAME} PRIVATE -flto=full)
        else()
            message(FATAL_ERROR "Unsupported configuration. Aura currently supports Debug and Release.")
        endif()
        add_test(NAME ${AURA_TEST_FILE} COMMAND ${AURA_TEST_NAME})
        set_tests_properties(${AURA_TEST_FILE} PROPERTIES WILL_FAIL TRUE)
        list(APPEND AURA_TESTING ${AURA_TEST_NAME})
    endforeach()
    add_custom_target(AURA_RUN_TESTS ALL COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure WORKING_DIRECTORY ${CMAKE_BINARY_DIR})
    add_dependencies(AURA_RUN_TESTS ${AURA_TESTING})
endif()